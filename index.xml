<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Takane's Site</title><link>https://takanezawa0829.github.io/</link><description>Recent content on Takane's Site</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 14 Jul 2024 15:37:54 +0900</lastBuildDate><atom:link href="https://takanezawa0829.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>マニピュレータ制御①～順運動学、逆運動学～</title><link>https://takanezawa0829.github.io/posts/manipulator_kinematics/</link><pubDate>Sun, 14 Jul 2024 15:37:54 +0900</pubDate><guid>https://takanezawa0829.github.io/posts/manipulator_kinematics/</guid><description>制作過程（ロボットアーム） 5自由度のマニピュレータを制作、制御します。マニピュレータで物を掴んだり、手書き文字を書いたり、イラストを描いたりすることが最終的な目標です。
あくまで趣味の延長として取り組んでいますが、将来的に私の研究の実証実験などで利用できれば一石二鳥と考えています。
また、サーボを手に入れるのに時間がかかりそうなので、まずは制御から取り掛かります。
この記事では、一度にマニピュレータの制御についてまとめると文章量が膨大になるため複数回に分けて記述します。
今回は、マニピュレータの先端速度を制御する術について書いていきます。
一般に順運動学とは、関節の角速度から先端速度や先端姿勢を求めることであり、逆運動学とは、先端速度や先端姿勢から関節の角速度を求めることをいいます。
今回作成するマニピュレータでは、直接的に操作できるパラメータは各関節のサーボの角速度であるため、マニピュレータの先端速度、姿勢を実現するために必要な関節角速度を求めることができる逆運動学を解くことが目標です。
そのためにまずは順運動学から計算して、関節角速度から先端速度、姿勢に変換する変換行列である「ヤコビアン」を計算します。
マニピュレータの定義 今回想定しているロボットアームはこのような5自由度の関節をもつマニピュレータです。
手先については、タスクに応じて手先にグリッパなどを取り付けたいと考えています。
5自由度マニピュレータのモデル 文字 定義 $\bm{r}$ 先端の座標ベクトル [cm] $θ_i$ 関節$i$の角度 [rad] $\bm{l_i}$ リンク$i$の長さのベクトル [cm] $\Sigma_i$ 座標系$i$ 太い矢印部分がマニピュレータの本体になり、回転軸が設定されている箇所に関節が存在します。
また、$\Sigma_i$の原点から$\Sigma_g$の原点までのベクトルを$\bm{P_i^g}$と定義します。
続いて、3次元（SE(3)）空間での回転行列、手先姿勢は以下のように定義します。
文字 定義 $\bm{R_i^g}$ $\Sigma_i$から見た$\Sigma_g$の姿勢を表す回転行列 $\alpha$ 手先の姿勢　Roll [rad] $\beta$ 手先の姿勢　Yaw [rad] このとき、$\bm{R_0^1}$、$\bm{R_4^5}$はz軸周りの回転であり、$\bm{R_1^2}$、$\bm{R_2^3}$、$\bm{R_3^4}$はx軸周りの回転であることから、回転行列は以下の通りです。
※視認性を良くするため、cos($θ_i$)は$c_i$、cos($θ_i$)*cos($θ_g$)は$c_{ig}$と記述します（sinも同様）
$$ \bm{R_0^1} = \bm{R_4^5} = \begin{pmatrix} c_i &amp;amp; -s_i &amp;amp; 0 \\ s_i &amp;amp; c_i &amp;amp; 0 \\ 0 &amp;amp; 0 &amp;amp; 1 \\ \end{pmatrix} $$ $$ \bm{R_1^2} = \bm{R_2^3} = \bm{R_3^4} = \begin{pmatrix} 1 &amp;amp; 0 &amp;amp; 0 \\ 0 &amp;amp; c_i &amp;amp; -s_i\\ 0 &amp;amp; s_i &amp;amp; c_i \\ \end{pmatrix} $$</description></item><item><title>LEDバーサライタ</title><link>https://takanezawa0829.github.io/posts/led-pov/</link><pubDate>Sat, 01 Jun 2024 15:07:54 +0900</pubDate><guid>https://takanezawa0829.github.io/posts/led-pov/</guid><description>作品紹介 電気研究部で電子工作教室を開催した際にキットとして販売したLEDバーサライタです。
LEDバーサライタは一定の周期でLEDの点灯を変化させることで振ると光の模様が残像として浮き出るおもちゃです。
LEDバーサライタの光の軌跡 工夫点はお客様が自ら模様をデザインすることで「世界に一つだけのLEDバーサライタ」を作成することができるという部分です。
当初、模様は予め作成したものをマイコンに書き込み大量にキットを用意して販売する予定だったのですが、お客様が模様をデザインできるようにしたところ、手紙をいただけるほど楽しんでいただくことができました。
同じ商品を売るとしてもコンセプト次第でここまで反応が変わるということに感動したことを覚えています。
電子工作教室の様子 デザインの仕方としては模様をエクセルで描いていただく方式で実施していました。（エクセルは馴染みがある方も多いため）
デザイン後は模様を16進数配列に変換し、現地で配列をマイコンに書き込むという方法で行っていました。</description></item><item><title>蜘蛛型ロボット</title><link>https://takanezawa0829.github.io/posts/hexapod/</link><pubDate>Sat, 01 Apr 2023 15:07:54 +0900</pubDate><guid>https://takanezawa0829.github.io/posts/hexapod/</guid><description>作品紹介 1脚3関節の6脚ロボットをチームで作成しました。
私は主にリーダー、電子回路、内部システムを担当しました。
開発言語はPython、ミドルウェアとしてROSを使用しています。
蜘蛛型ロボット</description></item><item><title>ボタン式電子オセロ</title><link>https://takanezawa0829.github.io/posts/othello/</link><pubDate>Fri, 09 Dec 2022 15:07:54 +0900</pubDate><guid>https://takanezawa0829.github.io/posts/othello/</guid><description>作品紹介 電気研究部で電子工作教室を開催した際に展示した電子オセロです。
縦横のボタンで配置する箇所を指定して真ん中のボタンを押すことで配置することができます。
マイコンのメモリの範囲内でオセロプログラムを作成する必要があり、マイコンの様々な機能を知ることができたので良い経験になりました。</description></item><item><title>電子名刺</title><link>https://takanezawa0829.github.io/posts/electronic-business-card/</link><pubDate>Tue, 01 Mar 2022 15:07:54 +0900</pubDate><guid>https://takanezawa0829.github.io/posts/electronic-business-card/</guid><description>作品紹介 スマホにかざすと当サイトにつながる電子名刺です。
NFCタグを使用してなにか作れないか考えたことがきっかけで作成することにしました。
Webサイトへの誘導以外にも連絡先の共有や各種操作の自動化などが行えるので活用の幅は大きいかもしれません。
NFCタグ</description></item><item><title>Go বেসিক</title><link>https://takanezawa0829.github.io/notes/go/basic/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://takanezawa0829.github.io/notes/go/basic/_index.bn/</guid><description/></item><item><title>Introduction</title><link>https://takanezawa0829.github.io/notes/go/basic/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://takanezawa0829.github.io/notes/go/basic/introduction/</guid><description> Hello World A sample go program is show here.
package main import &amp;#34;fmt&amp;#34; func main() { message := greetMe(&amp;#34;world&amp;#34;) fmt.Println(message) } func greetMe(name string) string { return &amp;#34;Hello, &amp;#34; + name + &amp;#34;!&amp;#34; } Run the program as below:
$ go run hello.go Variables Normal Declaration:
var msg string msg = &amp;#34;Hello&amp;#34; Shortcut:
msg := &amp;#34;Hello&amp;#34; Constants const Phi = 1.618</description></item><item><title>Basic Types</title><link>https://takanezawa0829.github.io/notes/go/basic/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://takanezawa0829.github.io/notes/go/basic/types/</guid><description>Strings str := &amp;#34;Hello&amp;#34; Multiline string
str := `Multiline string` Numbers Typical types
num := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(&amp;#39;a&amp;#39;) // byte (alias for uint8) Other Types
var u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.</description></item><item><title>অ্যাডভান্সড</title><link>https://takanezawa0829.github.io/notes/go/advanced/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://takanezawa0829.github.io/notes/go/advanced/_index.bn/</guid><description/></item><item><title>Flow Control</title><link>https://takanezawa0829.github.io/notes/go/basic/flow-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://takanezawa0829.github.io/notes/go/basic/flow-control/</guid><description>Condition if day == &amp;#34;sunday&amp;#34; || day == &amp;#34;saturday&amp;#34; { rest() } else if day == &amp;#34;monday&amp;#34; &amp;amp;&amp;amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(&amp;#34;Uh oh&amp;#34;) Switch switch day { case &amp;#34;sunday&amp;#34;: // cases don&amp;#39;t &amp;#34;fall through&amp;#34; by default! fallthrough case &amp;#34;saturday&amp;#34;: rest() default: work() } Loop for count := 0; count &amp;lt;= 10; count++ { fmt.Println(&amp;#34;My counter is at&amp;#34;, count) } entry := []string{&amp;#34;Jack&amp;#34;,&amp;#34;John&amp;#34;,&amp;#34;Jones&amp;#34;} for i, val := range entry { fmt.</description></item><item><title>File Manipulation</title><link>https://takanezawa0829.github.io/notes/go/advanced/files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://takanezawa0829.github.io/notes/go/advanced/files/</guid><description> Condition if day == &amp;#34;sunday&amp;#34; || day == &amp;#34;saturday&amp;#34; { rest() } else if day == &amp;#34;monday&amp;#34; &amp;amp;&amp;amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(&amp;#34;Uh oh&amp;#34;)</description></item><item><title>Bash Variables</title><link>https://takanezawa0829.github.io/notes/bash/basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://takanezawa0829.github.io/notes/bash/basic/</guid><description> Variable NAME=&amp;#34;John&amp;#34; echo $NAME echo &amp;#34;$NAME&amp;#34; echo &amp;#34;${NAME} Condition if [[ -z &amp;#34;$string&amp;#34; ]]; then echo &amp;#34;String is empty&amp;#34; elif [[ -n &amp;#34;$string&amp;#34; ]]; then echo &amp;#34;String is not empty&amp;#34; fi</description></item><item><title>Go এর নোট সমূহ</title><link>https://takanezawa0829.github.io/notes/go/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://takanezawa0829.github.io/notes/go/_index.bn/</guid><description>Go Notes</description></item><item><title>নোট সমূহ</title><link>https://takanezawa0829.github.io/notes/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://takanezawa0829.github.io/notes/_index.bn/</guid><description/></item><item><title>ব্যাশের নোট সমূহ</title><link>https://takanezawa0829.github.io/notes/bash/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://takanezawa0829.github.io/notes/bash/_index.bn/</guid><description>Bash Notes</description></item></channel></rss>