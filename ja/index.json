[{"categories":null,"contents":"制作過程（ロボットアーム） 5自由度のマニピュレータを制作、制御します。マニピュレータで物を掴んだり、手書き文字を書いたり、イラストを描いたりすることが最終的な目標です。\nあくまで趣味の延長として取り組んでいますが、将来的に私の研究の実証実験などで利用できれば一石二鳥と考えています。\nまた、サーボを手に入れるのに時間がかかりそうなので、まずは制御から取り掛かります。\nこの記事では、一度にマニピュレータの制御についてまとめると文章量が膨大になるため複数回に分けて記述します。\n今回は、マニピュレータの先端速度を制御する術について書いていきます。\n一般に順運動学とは、関節の角速度から先端速度や先端姿勢を求めることであり、逆運動学とは、先端速度や先端姿勢から関節の角速度を求めることをいいます。\n今回作成するマニピュレータでは、直接的に操作できるパラメータは各関節のサーボの角速度であるため、マニピュレータの先端速度、姿勢を実現するために必要な関節角速度を求めることができる逆運動学を解くことが目標です。\nそのためにまずは順運動学から計算して、関節角速度から先端速度、姿勢に変換する変換行列である「ヤコビアン」を計算します。\nマニピュレータの定義 今回想定しているロボットアームはこのような5自由度の関節をもつマニピュレータです。\n手先については、タスクに応じて手先にグリッパなどを取り付けたいと考えています。\n5自由度マニピュレータのモデル 文字 定義 $\\bm{r}$ 先端の座標ベクトル [cm] $θ_i$ 関節$i$の角度 [rad] $\\bm{l_i}$ リンク$i$の長さのベクトル [cm] $\\Sigma_i$ 座標系$i$ 太い矢印部分がマニピュレータの本体になり、回転軸が設定されている箇所に関節が存在します。\nまた、$\\Sigma_i$の原点から$\\Sigma_g$の原点までのベクトルを$\\bm{P_i^g}$と定義します。\n続いて、3次元（SE(3)）空間での回転行列、手先姿勢は以下のように定義します。\n文字 定義 $\\bm{R_i^g}$ $\\Sigma_i$から見た$\\Sigma_g$の姿勢を表す回転行列 $\\alpha$ 手先の姿勢　Roll [rad] $\\beta$ 手先の姿勢　Yaw [rad] このとき、$\\bm{R_0^1}$、$\\bm{R_4^5}$はz軸周りの回転であり、$\\bm{R_1^2}$、$\\bm{R_2^3}$、$\\bm{R_3^4}$はx軸周りの回転であることから、回転行列は以下の通りです。\n※視認性を良くするため、cos($θ_i$)は$c_i$、cos($θ_i$)*cos($θ_g$)は$c_{ig}$と記述します（sinも同様）\n$$ \\bm{R_0^1} = \\bm{R_4^5} = \\begin{pmatrix} c_i \u0026amp; -s_i \u0026amp; 0 \\\\ s_i \u0026amp; c_i \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 1 \\\\ \\end{pmatrix} $$ $$ \\bm{R_1^2} = \\bm{R_2^3} = \\bm{R_3^4} = \\begin{pmatrix} 1 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; c_i \u0026amp; -s_i\\\\ 0 \u0026amp; s_i \u0026amp; c_i \\\\ \\end{pmatrix} $$\n順運動学解の導出 $\\Sigma_4$から$\\Sigma_r$までは、以下のように表すことができます。 $$ \\bm{P_4^r} = \\bm{R_4^5} \\cdot \\bm{l_5} + \\bm{l_4} $$ 次に$\\bm{P_3^r}$は、先ほど求めた$\\bm{P_4^r}$を使用して以下のように表すことができます。 $$ \\bm{P_3^r} = \\bm{R_3^4} \\cdot \\bm{P_4^r} + \\bm{l_3} $$ $$ = \\bm{R_3^4} \\cdot \\bm{R_4^5} \\cdot \\bm{l_5} + \\bm{R_3^4} \\cdot \\bm{l_4} + \\bm{l_3} $$ 同様に繰り返していくことで、$\\bm{P_0^r}$は以下のように表すことができます。 $$ \\bm{P_0^r} = \\bm{R_0^1} \\cdot \\bm{R_1^2} \\cdot \\bm{R_2^3} \\cdot \\bm{R_3^4} \\cdot \\bm{R_4^5} \\cdot \\bm{l_5} $$ $$ +\\bm{R_0^1} \\cdot \\bm{R_1^2} \\cdot \\bm{R_2^3} \\cdot \\bm{R_3^4} \\cdot \\bm{l_4} $$ $$ +\\bm{R_0^1} \\cdot \\bm{R_1^2} \\cdot \\bm{R_2^3} \\cdot \\bm{l_3} $$ $$ +\\bm{R_0^1} \\cdot \\bm{R_1^2} \\cdot \\bm{l_2} $$ $$ +\\bm{R_0^1} \\cdot \\bm{l_1} $$ $$ +\\bm{l_0} $$\n以上により、$\\bm{P_0^r}$が求まりました。\n実際に計算した値がこちらです。（変数th$i$は、$θ_i$）\nMATLABで計算した$\\bm{P_0^r}$ 続いては、$\\bm{P_0^r}$の式から実際にヤコビアンを計算していきます。\nそのためにまずは、以下の$\\bm{A}$、$\\bm{G}$を定義します。\n$$ \\bm{A} = \\frac{d}{dt} \\begin{pmatrix} \\bm{P_0^r} \\\\ \\alpha \\\\ \\beta \\\\ \\end{pmatrix} $$ $$ \\bm{G} = \\frac{d}{dt} \\begin{pmatrix} θ_1 \\\\ θ_2 \\\\ θ_3 \\\\ θ_4 \\\\ θ_5 \\\\ \\end{pmatrix} $$\nそして、$\\bm{P_0^r}$の時間微分を利用することで、以下の式が成り立つようなヤコビアン$\\bm{J}$を求めます。\n$$ \\bm{A} = \\bm{J} \\cdot \\bm{G} $$ $$ \\bm{J} = \\begin{pmatrix} \\frac{d}{dθ_1}\\bm{P_0^r} \u0026amp; \\frac{d}{dθ_2}\\bm{P_0^r} \u0026amp; \\frac{d}{dθ_3}\\bm{P_0^r} \u0026amp; \\frac{d}{dθ_4}\\bm{P_0^r} \u0026amp; \\frac{d}{dθ_5}\\bm{P_0^r} \\\\ 0 \u0026amp; 1 \u0026amp; 1 \u0026amp; 1 \u0026amp; 0 \\\\ 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\\\ \\end{pmatrix} $$\n実際に計算されたヤコビアンは式が長すぎるので、ここでは省略します。\n逆運動学解の導出 最後にやっと逆運動学解が求められます。\n逆運動学は、先端速度、先端姿勢から関節角速度を求められればよいので、以下のような式が成り立つ$\\bm{J}^{-1}$を求めます。\n$$ \\bm{G} = \\bm{J}^{-1} \\cdot \\bm{A} $$ 今回のマニピュレータは5自由度で手先 $ \\bm{G} $ を制御しようとしているため、求めたヤコビアン$\\bm{J}$は特異姿勢以外では、正則な行列となるため逆行列が存在します。\n逆行列が存在しているため、そのまま$\\bm{J}$の逆行列を求めることができれば、$\\bm{J}^{-1}$が逆運動学解になります。\n（関節の数が多いマニピュレータなど、冗長性がある場合は、別の手段をとる必要がある）\n実際に計算された逆ヤコビアンは式が長すぎるので、ここでは省略します。\nまとめ はじめに順運動学から計算していくことで、ヤコビアンを求め、その逆行列を計算して逆運動学解を求めました。\n次回は、トルクの計算か制御システムを実装してリモコンで手先制御などを行う予定です。\n","date":"July 14, 2024","hero":"/posts/manipulator_kinematics/hero.png","permalink":"https://takanezawa0829.github.io/ja/posts/manipulator_kinematics/","summary":"制作過程（ロボットアーム） 5自由度のマニピュレータを制作、制御します。マニピュレータで物を掴んだり、手書き文字を書いたり、イラストを描いたりすることが最終的な目標です。\nあくまで趣味の延長として取り組んでいますが、将来的に私の研究の実証実験などで利用できれば一石二鳥と考えています。\nまた、サーボを手に入れるのに時間がかかりそうなので、まずは制御から取り掛かります。\nこの記事では、一度にマニピュレータの制御についてまとめると文章量が膨大になるため複数回に分けて記述します。\n今回は、マニピュレータの先端速度を制御する術について書いていきます。\n一般に順運動学とは、関節の角速度から先端速度や先端姿勢を求めることであり、逆運動学とは、先端速度や先端姿勢から関節の角速度を求めることをいいます。\n今回作成するマニピュレータでは、直接的に操作できるパラメータは各関節のサーボの角速度であるため、マニピュレータの先端速度、姿勢を実現するために必要な関節角速度を求めることができる逆運動学を解くことが目標です。\nそのためにまずは順運動学から計算して、関節角速度から先端速度、姿勢に変換する変換行列である「ヤコビアン」を計算します。\nマニピュレータの定義 今回想定しているロボットアームはこのような5自由度の関節をもつマニピュレータです。\n手先については、タスクに応じて手先にグリッパなどを取り付けたいと考えています。\n5自由度マニピュレータのモデル 文字 定義 $\\bm{r}$ 先端の座標ベクトル [cm] $θ_i$ 関節$i$の角度 [rad] $\\bm{l_i}$ リンク$i$の長さのベクトル [cm] $\\Sigma_i$ 座標系$i$ 太い矢印部分がマニピュレータの本体になり、回転軸が設定されている箇所に関節が存在します。\nまた、$\\Sigma_i$の原点から$\\Sigma_g$の原点までのベクトルを$\\bm{P_i^g}$と定義します。\n続いて、3次元（SE(3)）空間での回転行列、手先姿勢は以下のように定義します。\n文字 定義 $\\bm{R_i^g}$ $\\Sigma_i$から見た$\\Sigma_g$の姿勢を表す回転行列 $\\alpha$ 手先の姿勢　Roll [rad] $\\beta$ 手先の姿勢　Yaw [rad] このとき、$\\bm{R_0^1}$、$\\bm{R_4^5}$はz軸周りの回転であり、$\\bm{R_1^2}$、$\\bm{R_2^3}$、$\\bm{R_3^4}$はx軸周りの回転であることから、回転行列は以下の通りです。\n※視認性を良くするため、cos($θ_i$)は$c_i$、cos($θ_i$)*cos($θ_g$)は$c_{ig}$と記述します（sinも同様）\n$$ \\bm{R_0^1} = \\bm{R_4^5} = \\begin{pmatrix} c_i \u0026amp; -s_i \u0026amp; 0 \\\\ s_i \u0026amp; c_i \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 1 \\\\ \\end{pmatrix} $$ $$ \\bm{R_1^2} = \\bm{R_2^3} = \\bm{R_3^4} = \\begin{pmatrix} 1 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; c_i \u0026amp; -s_i\\\\ 0 \u0026amp; s_i \u0026amp; c_i \\\\ \\end{pmatrix} $$","tags":null,"title":"マニピュレータ制御①～順運動学、逆運動学～"},{"categories":null,"contents":"作品紹介 電気研究部で電子工作教室を開催した際にキットとして販売したLEDバーサライタです。\nLEDバーサライタは一定の周期でLEDの点灯を変化させることで振ると光の模様が残像として浮き出るおもちゃです。\nLEDバーサライタの光の軌跡 工夫点はお客様が自ら模様をデザインすることで「世界に一つだけのLEDバーサライタ」を作成することができるという部分です。\n当初、模様は予め作成したものをマイコンに書き込み大量にキットを用意して販売する予定だったのですが、お客様が模様をデザインできるようにしたところ、手紙をいただけるほど楽しんでいただくことができました。\n同じ商品を売るとしてもコンセプト次第でここまで反応が変わるということに感動したことを覚えています。\n電子工作教室の様子 デザインの仕方としては模様をエクセルで描いていただく方式で実施していました。（エクセルは馴染みがある方も多いため）\nデザイン後は模様を16進数配列に変換し、現地で配列をマイコンに書き込むという方法で行っていました。\n","date":"June 1, 2024","hero":"/posts/led-pov/hero.jpg","permalink":"https://takanezawa0829.github.io/ja/posts/led-pov/","summary":"作品紹介 電気研究部で電子工作教室を開催した際にキットとして販売したLEDバーサライタです。\nLEDバーサライタは一定の周期でLEDの点灯を変化させることで振ると光の模様が残像として浮き出るおもちゃです。\nLEDバーサライタの光の軌跡 工夫点はお客様が自ら模様をデザインすることで「世界に一つだけのLEDバーサライタ」を作成することができるという部分です。\n当初、模様は予め作成したものをマイコンに書き込み大量にキットを用意して販売する予定だったのですが、お客様が模様をデザインできるようにしたところ、手紙をいただけるほど楽しんでいただくことができました。\n同じ商品を売るとしてもコンセプト次第でここまで反応が変わるということに感動したことを覚えています。\n電子工作教室の様子 デザインの仕方としては模様をエクセルで描いていただく方式で実施していました。（エクセルは馴染みがある方も多いため）\nデザイン後は模様を16進数配列に変換し、現地で配列をマイコンに書き込むという方法で行っていました。","tags":null,"title":"LEDバーサライタ"},{"categories":null,"contents":"作品紹介 1脚3関節の6脚ロボットをチームで作成しました。\n私は主にリーダー、電子回路、内部システムを担当しました。\n開発言語はPython、ミドルウェアとしてROSを使用しています。\n蜘蛛型ロボット ","date":"April 1, 2023","hero":"/posts/hexapod/hero.jpg","permalink":"https://takanezawa0829.github.io/ja/posts/hexapod/","summary":"作品紹介 1脚3関節の6脚ロボットをチームで作成しました。\n私は主にリーダー、電子回路、内部システムを担当しました。\n開発言語はPython、ミドルウェアとしてROSを使用しています。\n蜘蛛型ロボット ","tags":null,"title":"蜘蛛型ロボット"},{"categories":null,"contents":"作品紹介 電気研究部で電子工作教室を開催した際に展示した電子オセロです。\n縦横のボタンで配置する箇所を指定して真ん中のボタンを押すことで配置することができます。\nマイコンのメモリの範囲内でオセロプログラムを作成する必要があり、マイコンの様々な機能を知ることができたので良い経験になりました。\n","date":"December 9, 2022","hero":"/posts/othello/hero.jpg","permalink":"https://takanezawa0829.github.io/ja/posts/othello/","summary":"作品紹介 電気研究部で電子工作教室を開催した際に展示した電子オセロです。\n縦横のボタンで配置する箇所を指定して真ん中のボタンを押すことで配置することができます。\nマイコンのメモリの範囲内でオセロプログラムを作成する必要があり、マイコンの様々な機能を知ることができたので良い経験になりました。","tags":null,"title":"ボタン式電子オセロ"},{"categories":null,"contents":"作品紹介 スマホにかざすと当サイトにつながる電子名刺です。\nNFCタグを使用してなにか作れないか考えたことがきっかけで作成することにしました。\nWebサイトへの誘導以外にも連絡先の共有や各種操作の自動化などが行えるので活用の幅は大きいかもしれません。\nNFCタグ ","date":"March 1, 2022","hero":"/posts/electronic-business-card/hero.jpg","permalink":"https://takanezawa0829.github.io/ja/posts/electronic-business-card/","summary":"作品紹介 スマホにかざすと当サイトにつながる電子名刺です。\nNFCタグを使用してなにか作れないか考えたことがきっかけで作成することにしました。\nWebサイトへの誘導以外にも連絡先の共有や各種操作の自動化などが行えるので活用の幅は大きいかもしれません。\nNFCタグ ","tags":null,"title":"電子名刺"}]